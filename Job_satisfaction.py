#!/usr/bin/env python
# coding: utf-8

# –¶–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞.
# 
# 
# –ü–ª–∞–Ω —Ä–∞–±–æ—Ç:
# 
# 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# 1.1. –ü–æ–¥–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
# 1.2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö, –∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ–º–Ω–æ–≥–æ —É–¥–∞–ª–∏—Ç—å
# 1.3. –í –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–ø—É—Å–∫–∞—Ö –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏
# 1.4. –£–¥–∞–ª–∏—Ç—å —è–≤–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
# 1.5. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
# 1.6. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
# 1.7. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–µ—è–≤–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
# 
# 
# 2. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
# 2.1. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
# 2.2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–æ—Å—ã
# 2.3. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–µ—Å–ª–∏ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
# 2.4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∑–∞–∏–º–æ—Å–≤–∑—å –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
# 
# 
# 3. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å
# 3.1. —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –º–æ–¥–µ–ª–µ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (—Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
# 3.2. –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å)
# 

# In[1]:


get_ipython().system('pip install phik  # -q —É–±–∏—Ä–∞–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã –≤ –∫–æ–º–∞–Ω–¥–∞—Ö Linux')
get_ipython().system('pip install shap')
#!pip install -Uq matplotlib

get_ipython().system('pip install -U matplotlib')
get_ipython().system('pip install scikit-learn==1.4')


# In[2]:


get_ipython().system('pip install matplotlib==3.2.2')


# In[3]:


import pandas as pd
import numpy as np
#from math import sqrt
#import datetime as dt
import seaborn as sns

import phik
from phik import phik_matrix
from phik.report import plot_correlation_matrix

import scipy.stats as st
from scipy.stats import shapiro, ttest_ind

from matplotlib import pyplot as plt
plt.rcParams["figure.figsize"] = (10,10)
from matplotlib.pyplot import figure

#from sklearn.model_selection import train_test_split
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV

from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, StandardScaler, MinMaxScaler#, RobustScaler, LabelEncoder

from sklearn.metrics import r2_score
#from sklearn.metrics import accuracy_score
#from sklearn.metrics import recall_score
#from sklearn.metrics import precision_score
#from sklearn.metrics import confusion_matrix
#from sklearn.metrics import mean_absolute_error
#from sklearn.metrics import mean_squared_error
from sklearn.metrics import roc_auc_score
from sklearn.metrics import make_scorer


# In[4]:


from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer

from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression

from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVC
from sklearn.dummy import DummyClassifier
import shap


# # –ó–∞–¥–∞—á–∞ 1

# ## –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[5]:


data_train = pd.read_csv('/datasets/train_job_satisfaction_rate.csv')
test_features = pd.read_csv('/datasets/test_features.csv')
test_target_job_satisfaction_rate = pd.read_csv('/datasets/test_target_job_satisfaction_rate.csv')


# In[6]:


data_train = data_train.set_index('id')
test_features = test_features.set_index('id')
test_target_job_satisfaction_rate = test_target_job_satisfaction_rate.set_index('id')


# In[7]:


data_test = test_features.merge(test_target_job_satisfaction_rate, on='id', how='left')
data_test.info()


# ##  –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# ###  train_job_satisfaction_rate

# In[8]:


data_train.head()


# In[9]:


data_train.info()


# <div class="alert alert-info"> —Ç–∏–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å –æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ (–ø—Ä–∞–≤–¥–∞ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–ø–æ–ª–ª–Ω–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏) <div>

# In[10]:


cols = ['dept', 'level', 'workload', 'last_year_promo', 'last_year_violations']


# In[11]:


for i in cols:
    print(data_train[i].unique())


# ###  test_features

# In[12]:


data_test.head()


# In[13]:


data_test.info()


# <div class="alert alert-info"> —Ç–∏–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å –æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ (–ø—Ä–∞–≤–¥–∞ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–ø–æ–ª–ª–Ω–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏) <div>

# In[14]:


for i in cols:
    print(data_test[i].unique())


# In[15]:


data_test.head()


# In[16]:


data_test.info()


# In[17]:


data_train.index.value_counts().sort_values(ascending = False)


# In[18]:


data_test.index.value_counts().sort_values(ascending = False)


# <div class="alert alert-info"> –≤—Å–µ id —É–Ω–∏–∫–∞–ª—å–Ω—ã - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —É–¥–∞–ª—è—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ–ª—å–∑—è (–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç) <div>

# –ü–æ –∏—Ç–æ–≥–∞–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
# - –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–æ–≤—Ç–µ—Å—Ç–≤—É—é—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
# - –ø—Ä–æ–ø—É—Å–∫–æ–≤ –µ—Å—Ç—å - –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏—Ö –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º, –∑–∞–º–µ–Ω–∏–≤ –Ω–∞ –º–æ–¥—É
# - –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç
# - –Ω–µ—è–≤–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç

# <div class="alert alert-info"> –°–µ–π—á–∞—Å –≤—Å–µ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ <div>

# ## –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

# <div class="alert alert-info"> –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ <div>

# ###  data_train

# In[19]:


categorical_columns = [c for c in data_train.columns if data_train[c].dtype.name == 'object']
numerical_columns   = [c for c in data_train.columns if data_train[c].dtype.name != 'object']


# In[20]:


data_train.describe()


# <div class="alert alert-info"> –Ø —Ç–æ–≥–¥–∞ –ø–æ–¥ –∫–∞–∂–¥—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º —Å–µ–π—á–∞—Å —á–µ–∫ –ª–∏—Å—Ç –±—É–¥—É –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é <div>

# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ v.4 <a class="tocSkip"> </h2>
# 
# <b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç</b> –£—á—Ç–µ–Ω–æ.

# In[21]:


data_train['employment_years'].hist(bins=10)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.xlabel('–ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• –∏ –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[22]:


data_train['supervisor_evaluation'].hist(bins=10)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.xlabel('–û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• –∏ –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# –£–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏... –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–∏—Ö –ø–æ–∑–∂–µ - –≤ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö

# In[23]:


print(data_train['employment_years'].unique())
print(data_train['supervisor_evaluation'].unique())


# In[24]:


data_train['salary'].hist(bins=10)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ó–∞—Ä–ø–ª–∞—Ç–∞')
plt.xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• –∏ –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[25]:


data_train['job_satisfaction_rate'].hist(bins=10)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
plt.xlabel('–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• –∏ –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[26]:


numerical_columns = ['salary', 'job_satisfaction_rate']
categorical_columns = categorical_columns + ['employment_years', 'supervisor_evaluation']
for i in numerical_columns:
    plt.rcParams["figure.figsize"] = (5,5)
    plt.figure()
    plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ " + i)
    plt.ylabel('–£—Ä–æ–≤–µ–Ω—å ' + i)
    plt.xlabel(i)
    plt.xticks([0], ['The Second Entry!'])
    plt.boxplot(data_train[i])


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[27]:


res = pd.DataFrame(columns=['–∫–æ–ª–æ–Ω–∫–∞', '–†–µ–∑—É–ª—å—Ç–∞—Ç'])
n=0
for i in numerical_columns:
    stat, p_val = shapiro(data_train[i])
    if p_val < 0.01: res.loc[n] = [i, '–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ']
    else: res.loc[n] = [i, '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ']
    n += 1
res


# <div class="alert alert-info"> –í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –∏–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –í—ã–±—Ä–æ—Å–æ–≤ –Ω–µ—Ç. –ü—Ä–∏–∑–Ω–∞–∫ supervisor_evaluation –∏ employment_years - –Ω–æ—Å—è—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä <div>

# In[28]:


ax = data_train['employment_years'].value_counts().plot.bar()
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.xlabel('–ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[29]:


ax = data_train['supervisor_evaluation'].value_counts().plot.bar()
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.xlabel('–ö–æ–ª-–≤–æ –û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# <div class="alert alert-info"> –ü–æ—Å—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π <div>

# In[30]:


phik_overview = data_train.phik_matrix(interval_cols=numerical_columns)
print(phik_overview.shape)


# In[31]:


plot_correlation_matrix(
    phik_overview.values,
    x_labels=phik_overview.columns,
    y_labels=phik_overview.index,
    vmin=0, vmax=1, color_map='Greens',
    title=r'correlation $\phi_K$',
    fontsize_factor=1.5,
    figsize=(20, 15)
)


# <div class="alert alert-info"> –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è. –ò–∑ –∏–Ω–µ—Ç—Ä–µ—Å–Ω–æ–≥–æ - –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∏–∑–∫–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ–π <div>

# In[32]:


phik_overview = data_test.phik_matrix(interval_cols=numerical_columns)
print(phik_overview.shape)


# In[33]:


plot_correlation_matrix(
    phik_overview.values,
    x_labels=phik_overview.columns,
    y_labels=phik_overview.index,
    vmin=0, vmax=1, color_map='Greens',
    title=r'correlation $\phi_K$',
    fontsize_factor=1.5,
    figsize=(20, 15)
)


# <div class="alert alert-info"> –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ. <div>

# ## –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏

# <div class="alert alert-info"> –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Å—É—â–µ—Å—Ç–≤–∏–º –≤—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–≤–æ–¥–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —è –ø—Ä–∏—à–µ–ª –≤—ã—à–µ <div>
#     - –∫–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫ supervisor_evaluation –∏ employment_years

# In[34]:


data_train.head()


# In[35]:


data_test.head()


# In[36]:


data_train.info()


# In[37]:


len(data_train)


# In[38]:


data_train = data_train.drop_duplicates()


# In[39]:


len(data_train)


# In[40]:


X_train = data_train.drop('job_satisfaction_rate', axis=1)
y_train = data_train['job_satisfaction_rate']
X_test = data_test.drop('job_satisfaction_rate', axis=1)
y_test = data_test['job_satisfaction_rate']


# In[41]:


X_train.info()


# In[42]:


ohe_columns = ['dept', 'last_year_promo', 'last_year_violations']
ord_columns = ['level', 'workload']#, 'supervisor_evaluation']


# In[43]:


num_columns = ['salary']


# In[44]:


just_columns = ['employment_years', 'supervisor_evaluation']


# <div class="alert alert-info"> –°–æ–∑–¥–∞–¥–∏–º pipeline <div>

# In[45]:


RANDOM_STATE = 42


# In[46]:


ohe_pipe=Pipeline([('simpleImputer_ohe', SimpleImputer(missing_values=np.nan, strategy='most_frequent')),
                 ('ohe', OneHotEncoder(handle_unknown='ignore', sparse_output=False, drop = 'first'))])


# In[47]:


ord_pipe=Pipeline([('simpleImputer_before_ord', SimpleImputer(missing_values=np.nan, strategy = 'most_frequent')),
                 ('ord',  OrdinalEncoder(categories=[['junior', 'middle', 'sinior'],
                                                     ['low', 'medium', 'high'],],
                                                     #[1, 2, 3, 4, 5],], 
                handle_unknown='use_encoded_value', unknown_value=np.nan)),
                 ('simpleImputer_after_ord', SimpleImputer(missing_values=np.nan, strategy='most_frequent'))])


# In[48]:


data_preprocessor=ColumnTransformer(transformers=[('ohe',ohe_pipe,ohe_columns),
                                    ('ord',ord_pipe,ord_columns),
                                    ('num',StandardScaler(),num_columns)],
                                    remainder='passthrough')


# In[49]:


pipe_final = Pipeline(
    [
        ('preprocessor', data_preprocessor),
        ('models', LinearRegression())
    ]
)


# In[50]:


X_test.info()


# In[51]:


for i in cols:
    print(X_test[i].unique())


# In[52]:


#X_test_p = pd.DataFrame(data_preprocessor.fit_transform(X_test))


# In[53]:


#feature_names = list(data_preprocessor.named_transformers_['ohe']['ohe'].get_feature_names_out(ohe_columns))
#feature_names += ord_columns
#feature_names += num_columns
#feature_names += just_columns
#X_test_p.columns = feature_names
#X_test_p.info()


# In[54]:


#X_test_p.head()


# In[55]:


y = pd.DataFrame(y_train)
y.info()


# In[56]:


param_grid = [
    {
        'models': [DecisionTreeRegressor(random_state=RANDOM_STATE)],
        'models__max_depth': range(2, 15),
        'models__max_features': range(2, 15),
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']  
    },
    {
        'models': [LinearRegression()],
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']   
    }]


# <div class="alert alert-info"> –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –º–µ—Ç—Ä–∏–∫–∏ <div>

# In[57]:


def smape( a , f ):
    smape = 1/ len (a) * np.sum (2 * np.abs (f-a) / (np.abs (a) + np.abs (f))*100)
    return smape


# In[58]:


scorer = make_scorer(smape, greater_is_better=False)  


# <div class="alert alert-info"> –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ <div>

# In[59]:


grid = GridSearchCV(
    pipe_final, 
    param_grid=param_grid, 
    cv=5, 
    scoring=scorer, 
    n_jobs=-1)


# In[60]:


grid.fit(X_train, y_train)


# In[61]:


pd.set_option('display.max_colwidth', None)
result = pd.DataFrame(grid.cv_results_)
result['mean_test_score'] = result['mean_test_score'] * -1
display(result[['rank_test_score', 'param_models', 'mean_test_score','params']].sort_values('rank_test_score').head(10))


# In[62]:


pred_test = grid.best_estimator_.predict(X_test)
pred_test


# In[63]:


print(smape(pred_test, y_test))


# In[64]:


r2 = r2_score(y_test, pred_test)  
r2


# In[65]:


# –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
# –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏
residuals = y_test - pred_test

# –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º ‚Äî –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ 
# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Å–µ—è–Ω–∏—è
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10,5))
axes[0].hist(residuals)
axes[0].set_title('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤')
axes[0].set_xlabel('–û—Å—Ç–∞—Ç–∫–∏')
axes[0].set_ylabel('–ö–û–ª–∏—á–µ—Å—Ç–≤–æ')
#plt.rcParams["figure.figsize"] = (5,5)

axes[1].scatter(pred_test, residuals)
axes[1].set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏')
axes[1].set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
axes[1].set_title('–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏')
#plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[67]:


res = pd.DataFrame(columns=['–∫–æ–ª–æ–Ω–∫–∞', '–†–µ–∑—É–ª—å—Ç–∞—Ç'])
stat, p_val = shapiro(residuals)
if p_val < 0.05: res.loc[n] = ['–æ—Å—Ç–∞—Ç–∫–∏', '–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ']
else: res.loc[n] = ['–æ—Å—Ç–∞—Ç–∫–∏', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ']
res


# <div class="alert alert-info"> R2 = 0,86
# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤:
# - —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç, —Ç–æ –µ—Å—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏–º–µ—Ä–Ω–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç
# - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ

# <div class="alert alert-info"> –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å:
# {'models': DecisionTreeRegressor(random_state=42), 'models__max_depth': 13, 'models__max_features': 11, 'preprocessor__num': MinMaxScaler()}
# 
# SMAPE –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ = 14,42
# R^2 = 0.86

# In[68]:


X_train.info()


# In[69]:


X_train_p = pd.DataFrame(data_preprocessor.fit_transform(X_train))
X = pd.DataFrame(X_train_p, columns= ohe_columns + ord_columns+num_columns)
feature_names = list(data_preprocessor.named_transformers_['ohe']['ohe'].get_feature_names_out(ohe_columns))
feature_names += ord_columns
feature_names += num_columns
feature_names += just_columns
X_train_p.columns = feature_names
X_train_p.info()


# In[70]:


model = grid.best_estimator_.named_steps['models']
#feature_importance = pd.DataFrame(model.feature_importances_)
feature_importance = pd.DataFrame({'Feature': X_train_p.columns, 'Importance': model.feature_importances_})
feature_importance = feature_importance.sort_values('Importance', ascending=True)
feature_importance.plot(x='Feature', y='Importance', kind='barh', figsize=(10, 6))
plt.title('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤]')
plt.xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.ylabel('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# # –ó–∞–¥–∞—á–∞ 2

# ## –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[71]:


train_quit = pd.read_csv('/datasets/train_quit.csv')
test_features = pd.read_csv('/datasets/test_features.csv')
test_target_quit = pd.read_csv('/datasets/test_target_quit.csv')


# In[72]:


train_quit.head()


# In[73]:


test_features.head()


# In[74]:


test_target_quit.head()


# In[75]:


test_target_quit.info()


# In[76]:


test_features.info()


# In[77]:


train_quit = train_quit.set_index('id')
test_features = test_features.set_index('id')
test_target_quit = test_target_quit.set_index('id')


# In[78]:


#–ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ –ø–µ—Ä–µ–∫–æ—á–µ–≤–∞–ª–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏, —Ç–æ —ç—Ç–æ –Ω–∞—à X_test, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ quit
test_quit = X_test.merge(test_target_quit, how = 'left', on = 'id')
test_quit.info()


# ## –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# <div class="alert alert-info"> –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±—É–¥–µ–º —Ç–æ–ª—å–∫–æ train_quit, —Ç.–∫. test_quit –±—ã–ª –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ

# In[79]:


train_quit.head()


# In[80]:


train_quit.info()


# —Ç–∏–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å –æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º, –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç

# In[81]:


cols = ['dept', 'level', 'workload', 'last_year_promo', 'last_year_violations']
for i in cols:
    print(train_quit[i].unique())


# In[82]:


train_quit.index.value_counts().sort_values(ascending = False)


# –ü–æ –∏—Ç–æ–≥–∞–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
# - –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–æ–≤—Ç–µ—Å—Ç–≤—É—é—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
# - –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç
# - –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç
# - –Ω–µ—è–≤–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç

# ## –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

# In[83]:


train_quit.describe()


# In[84]:


train_quit['employment_years'].hist(bins=10)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.xlabel('–ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[86]:


train_quit['supervisor_evaluation'].hist(bins=10)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.xlabel('–û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É, —á—Ç–æ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏... 

# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[87]:


print(train_quit['employment_years'].unique())
print(train_quit['supervisor_evaluation'].unique())


# In[88]:


train_quit['salary'].hist(bins=10)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ó–∞—Ä–ø–ª–∞—Ç–∞')
plt.xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[89]:


plt.figure()
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã")
plt.rcParams["figure.figsize"] = (5,5)
plt.xlabel('salary')
plt.ylabel('–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã')
plt.xticks([0], ['The Second Entry!'])
#plt.boxplot('salary')
plt.boxplot(train_quit['salary']);


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# –í—ã–±—Ä–æ—Å–æ–≤ –Ω–µ—Ç

# In[90]:


ax = train_quit['employment_years'].value_counts().plot.bar()
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.xlabel('–ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–± –ª–µ—Ç')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# In[91]:


ax = train_quit['supervisor_evaluation'].value_counts().plot.bar()
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.xlabel('–ö–æ–ª-–≤–æ –û—Ü–µ–Ω–∫–∞ —Ä—É–∫-–ª—è')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# <div class="alert alert-info"> –ü–æ—Å—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π <div>

# In[92]:


phik_overview = train_quit.phik_matrix(interval_cols=['salary'])
print(phik_overview.shape)


# In[93]:


plot_correlation_matrix(
    phik_overview.values,
    x_labels=phik_overview.columns,
    y_labels=phik_overview.index,
    vmin=0, vmax=1, color_map='Greens',
    title=r'correlation $\phi_K$',
    fontsize_factor=1.5,
    figsize=(20, 15)
)


# <div class="alert alert-info"> –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è <div>

# In[94]:


len(train_quit)


# In[95]:


data_train = train_quit.drop_duplicates()


# In[96]:


len(train_quit)


# ## –ü–æ—Ä—Ç—Ä–µ—Ç —É–≤–æ–ª–∏–≤—à–µ–≥–æ—Å—è

# <div class="alert alert-info"> –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç —É–≤–æ–ª–∏–≤—à–µ–≥–æ—Å—è –∏ –µ–≥–≥–æ —Å–≤—è–∑—å —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ <div>

# In[97]:


sns.pairplot(train_quit, hue = 'quit');


# In[98]:


table = train_quit[['dept','quit']].value_counts().reset_index()
table.columns = ['dept', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('dept')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['dept','quit'])


# In[99]:


table = train_quit[['level','quit']].value_counts().reset_index()
table.columns = ['level', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('level')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['level','quit'])


# In[100]:


table = train_quit[['workload','quit']].value_counts().reset_index()
table.columns = ['workload', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('workload')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['workload','quit'])


# In[101]:


table = train_quit[['last_year_promo','quit']].value_counts().reset_index()
table.columns = ['last_year_promo', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('last_year_promo')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['last_year_promo','quit'])


# In[102]:


table = train_quit[['last_year_violations','quit']].value_counts().reset_index()
table.columns = ['last_year_violations', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('last_year_violations')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['last_year_violations','quit'])


# In[103]:


table = train_quit[['supervisor_evaluation','quit']].value_counts().reset_index()
table.columns = ['supervisor_evaluation', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('supervisor_evaluation')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['supervisor_evaluation','quit'])


# In[104]:


table = train_quit[['employment_years','quit']].value_counts().reset_index()
table.columns = ['employment_years', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('employment_years')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['employment_years','quit'])


# In[105]:


table = train_quit[['salary','quit']]
table['level_salary'] = ''
table.loc[table['salary']<=20000, ['level_salary']] = '0 - 20 000'
table.loc[(table['salary']>20000)&(table['salary']<=40000), ['level_salary']] = '20 000 - 40 000'
table.loc[(table['salary']>40000)&(table['salary']<=60000), ['level_salary']] = '40 000 - 60 000'
table.loc[(table['salary']>60000)&(table['salary']<=80000), ['level_salary']] = '60 000 - 80 000'
table.loc[table['salary']>80000, ['level_salary']] = '80 000 - 100 000'


# In[106]:


table = table[['level_salary','quit']].value_counts().reset_index()
table.columns = ['level_salary', 'quit', 'count']
table['share'] = table['count'].div(table.groupby('level_salary')['count'].transform(lambda x: x.sum()))
table.sort_values(by = ['level_salary','quit'])


# –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã.
# –°–∫–ª–æ–Ω–Ω—ã –∫ —Ç–µ–∫—É—á–∫–µ:
# - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Å—Ä–æ–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ - —á–µ–º –±–æ–ª—å—à–µ —Å—Ä–æ–∫ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏, —Ç–µ–º –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≤–æ–ª–∏—Ç—å—Å—è
# - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ - –≤ –æ–±—â–µ–º-—Ç–æ –ª–æ–≥–∏—á–Ω–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –∑–∞–¥–∞—á–∞–º–∏
# - –Ω–∏–∑–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ —Å–æ—Ä—Ç—å—Ä—É–¥–Ω–∏–∫–∏ –º–ª–∞–¥—à–∏—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –≠—Ç–∏ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç —É—Å—Ç–æ–π—á–∏–≤—É—é —Å–≤—è–∑—å (—á–µ–º –≤—ã—à–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å - —Ç–µ–º –≤—ã—à–µ –∑–∞—Ä–ø–ª–∞—Ç–∞, –ª–æ–≥–∏—á–Ω–æ) - —Å –±–æ–ª—å—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π —Å–ª–æ–∂–Ω–µ–µ –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–æ–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ—ç—Ç–æ–º—É —Ç–µ–∫—É—á–∫–∞ —Ç–∞–º –º–µ–Ω—å—à–µ
# - —á–µ–º –º–µ–Ω—å—à–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ä–∞–±–æ—Ç–æ–π, —Ç–µ–º –±–æ–ª—å—à–µ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞ –∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–∫—É—á–Ω–µ–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ, —á—Ç–æ —É–º–µ–Ω—å—à–∞–µ—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
# 
# –ü—Ä–æ—Ü–µ–Ω—Ç —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–µ–ø–∞—Ä–∞—Ç–∞–º–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# 
# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –Ω–µ —Å–∫–ª–æ–Ω–Ω—ã–µ –∫ —Ç–µ–∫—É—á–∫–µ:
# - –ø–æ–ª—É—á–∏–≤—à–∏–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
# - –Ω–µ –∏–º–µ—é—â–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
# 

# In[107]:


test_quit.info()


# In[108]:


data_test[['job_satisfaction_rate']].info()


# In[109]:


hypo_table = test_quit.merge(data_test['job_satisfaction_rate'], how = 'left', on ='id')
hypo_table = hypo_table[['quit', 'job_satisfaction_rate']]
hypo_table.head()


# In[110]:


sns.pairplot(hypo_table, hue = 'quit');


# In[111]:


sns.kdeplot(data=hypo_table, x="job_satisfaction_rate", hue="quit");


# In[112]:


sns.histplot(data=hypo_table, stat='density', common_norm=False, hue="quit", x="job_satisfaction_rate")


# <div class="alert alert-info"> –°—É–¥—è –ø–æ –≥—Ä–∞—Ñ–∏–∫—É, —á–µ–º –±–æ–ª—å—à–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã - —Ç–µ–º –º–µ–Ω—å—à–µ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å —É–≤–æ–ª—å–Ω—è—Ç—å—Å—è
# <div class="alert alert-info"> –î–æ–±–∞–≤–∏–º —ç—Ç–æ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –∫ –æ–±—É—á–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º

# In[113]:


group1 = hypo_table[hypo_table['quit']=='yes']
group2 = hypo_table[hypo_table['quit']=='no']


ttest_ind(group1['job_satisfaction_rate'], group2['job_satisfaction_rate'])

#Ttest_indResult(statistic=-2.6034304605397938, pvalue=0.017969284594810425)


# <div class="alert alert-info"> 
# H 0 : ¬µ 1 = ¬µ 2 (–¥–≤–µ —Å—Ä–µ–¥–Ω–∏–µ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞–≤–Ω—ã)
# H A : ¬µ 1 ‚â† ¬µ 2 (–¥–≤–µ —Å—Ä–µ–¥–Ω–∏–µ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞–≤–Ω—ã)
# –ü–æ—Å–∫–æ–ª—å–∫—É p-–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞ (pvalue=1.231122066517193e-104) –º–µ–Ω—å—à–µ, —á–µ–º –∞–ª—å—Ñ–∞ = 0,05, –º—ã –æ—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É —Ç–µ—Å—Ç–∞. 
# –£ –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ø—É–ª—è—Ü–∏—è–º–∏ —Ä–∞–∑–ª–∏—á–Ω–∞.

# In[114]:


X_train.info()


# In[115]:


train_quit.info()


# In[116]:


train_quit_temp = train_quit.drop('quit', axis=1)
train_quit_temp.info()


# In[117]:


pred_satisfy = grid.best_estimator_.predict(train_quit_temp)
pred_satisfy


# In[118]:


train_quit['job_satisfaction_rate'] = pred_satisfy
train_quit.head()


# In[119]:


test_quit.info()


# In[120]:


train_quit.info()


# In[121]:


test_quit_temp = test_quit.drop('quit', axis=1)
test_quit_temp.info()


# In[122]:


pred_satisfy = grid.best_estimator_.predict(test_quit_temp)
pred_satisfy


# In[123]:


test_quit['job_satisfaction_rate'] = pred_satisfy
test_quit.head()


# ## –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏

# In[124]:


len(train_quit)


# In[125]:


train_columns = train_quit.drop('quit', axis=1)
train_columns = list(train_columns.columns)
train_columns


# In[126]:


train_quit = train_quit.drop_duplicates(train_columns)
len(train_quit)


# In[127]:


X_train = train_quit.drop('quit', axis=1)
y_train = train_quit['quit']
X_test = test_quit.drop('quit', axis=1)
y_test = test_quit['quit']


# In[128]:


len(X_train)


# In[129]:


X_train.head()


# In[130]:


X_test.head()


# In[131]:


ohe_columns = ['dept', 'last_year_promo', 'last_year_violations']
ord_columns = ['level', 'workload']#, 'supervisor_evaluation']
num_columns = ['salary', 'job_satisfaction_rate']#, 'employment_years']
just_columns = ['employment_years', 'supervisor_evaluation']


# In[132]:


RANDOM_STATE = 42


# In[133]:


ohe_pipe=Pipeline([('simpleImputer_ohe', SimpleImputer(missing_values=np.nan, strategy='most_frequent')),
                 ('ohe', OneHotEncoder(handle_unknown='ignore', sparse_output=False, drop = 'first'))])


# In[134]:


ord_pipe=Pipeline([('simpleImputer_before_ord', SimpleImputer(missing_values=np.nan, strategy = 'most_frequent')),
                 ('ord',  OrdinalEncoder(categories=[['junior', 'middle', 'sinior'],
                                                     ['low', 'medium', 'high'],],
                                                     #[1, 2, 3, 4, 5],], 
                handle_unknown='use_encoded_value', unknown_value=np.nan)),
                 ('simpleImputer_after_ord', SimpleImputer(missing_values=np.nan, strategy='most_frequent'))])


# In[135]:


data_preprocessor=ColumnTransformer(transformers=[('ohe',ohe_pipe,ohe_columns),
                                    ('ord',ord_pipe,ord_columns),
                                    ('num',StandardScaler(),num_columns)],
                                    remainder='passthrough')


# In[136]:


pipe_final = Pipeline(
    [
        ('preprocessor', data_preprocessor),
        ('models', DecisionTreeClassifier(random_state=RANDOM_STATE))
    ]
)


# In[137]:


param_grid = [
    {
        'models': [DecisionTreeClassifier(random_state=RANDOM_STATE)],
        'models__max_depth': range(1, 10),
        'models__max_features': range(1, 10),
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']  
    },
    {
        'models': [KNeighborsClassifier()],
        'models__n_neighbors': range(1, 10),
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']   
    },
    {
        'models': [LogisticRegression(random_state=RANDOM_STATE,solver='liblinear',penalty='l1')],
        'models__C': range(1, 10),
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']  
    }
]


# In[138]:


grid = GridSearchCV(
    pipe_final, 
    param_grid=param_grid, 
    cv=5, 
    scoring='roc_auc', 
    n_jobs=-1)


# In[139]:


grid.fit(X_train, y_train)


# In[140]:


pd.set_option('display.max_colwidth', None)
result = pd.DataFrame(grid.cv_results_)
display(result[['rank_test_score', 'param_models', 'mean_test_score','params']].sort_values('rank_test_score')) 


# In[141]:


probabilities = grid.best_estimator_.predict_proba(X_test)
probabilities_one = probabilities[:, 1]
print('–ü–ª–æ—â–∞–¥—å ROC-–∫—Ä–∏–≤–æ–π:', roc_auc_score(y_test, probabilities_one))


# In[142]:


strategies = ['most_frequent', 'stratified', 'uniform']#, 'constant'] 

test_scores = [] 
for s in strategies: 
    dclf = DummyClassifier(strategy = s, random_state = 0) 
    dclf.fit(X_train, y_train) 
    #score = dclf.score(X_test, y_test) 
    
    probabilities = dclf.predict_proba(X_test)
    probabilities_one = probabilities[:, 1]
    #print('–ü–ª–æ—â–∞–¥—å ROC-–∫—Ä–∏–≤–æ–π:', roc_auc_score(y_test, probabilities_one))
    
    score = roc_auc_score(y_test, probabilities_one)
    test_scores.append(score) 


# In[143]:


ax = sns.stripplot(strategies, test_scores); 
ax.set(xlabel ='Strategy', ylabel ='Test Score') 
plt.show();


# <div class="alert alert-info"> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤—Å–µ–º –≥—Ä—É—Å—Ç–Ω—ã–µ, –∏ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –Ω–∞—à–∏—Ö –º–æ–¥–µ–ª—å–Ω—ã—Ö. –î–µ–ª–∞—é –≤—ã–≤–æ–¥, —á—Ç–æ –º–æ–¥–µ–ª—å –∞–¥–µ–∫–≤–∞—Ç–Ω–∞

# In[144]:


X_train_p = pd.DataFrame(data_preprocessor.fit_transform(X_train))
#X = pd.DataFrame(X_train_p, columns= ohe_columns + ord_columns+num_columns)
feature_names = list(data_preprocessor.named_transformers_['ohe']['ohe'].get_feature_names_out(ohe_columns))
feature_names += ord_columns
feature_names += num_columns
feature_names += just_columns
X_train_p.columns = feature_names
X_train_p.info()


# In[145]:


X_train_p.columns


# In[146]:


model = grid.best_estimator_.named_steps['models']
#feature_importance = pd.DataFrame(model.feature_importances_)
feature_importance = pd.DataFrame({'Feature': X_train_p.columns, 'Importance': model.feature_importances_})
feature_importance = feature_importance.sort_values('Importance', ascending=True)
feature_importance.plot(x='Feature', y='Importance', kind='barh', figsize=(10, 6))
plt.title('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤]')
plt.xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.ylabel('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
plt.rcParams["figure.figsize"] = (5,5)
plt.show()


# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –• - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π –£ - –µ—Å—Ç—å
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –µ—Å—Ç—å

# –†–∞–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
# - level
# - job_satisfaction_rate
# - workload
# - employment_years
# - supervisor_evaluation
# - salary

# ## –í—ã–≤–æ–¥—ã

# –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ 2 –≤—ã–±–æ—Ä–æ–∫: –æ–±—É—á–∞—é—â—à–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π.
# –ö–∞–∂–¥–∞—è –∏–∑ –≤—ã–±–æ—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
# - –¥–∞–Ω–Ω—ã–µ c —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
# - –¥–∞–Ω–Ω—ã–µ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π - —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –æ—Ç —Ä–∞–±–æ—Ç—ã
# - –¥–∞–Ω–Ω—ã–µ —Å –¥—Ä—É–≥–æ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π - —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# 
# –ù–∞ –ø—Ä–µ–≤–æ–º —ç—Ç–∞–ø–µ –±—ã–ª–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:
# - –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ —Ç–∞–∫–æ–≤—ã–µ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö –∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
# - –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ—á–µ—Ç–∞—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤
# - –Ω–µ—è–≤–Ω—ã—Ö –∏ —è–≤–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ –±—ã–ª–æ
# 
# –ù–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–ø–µ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:
# - –±—ã–ª–∏ –≤—ã—è–≤–ª–µ–Ω—ã —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –Ω–æ—Å–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä
# - —Ä—è–¥ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–æ—Å–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä (–æ—Ü–µ–Ω–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5)
# - –≤—ã–±—Ä–æ—Å–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ –±—ã–ª–æ
# 
# –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ :
# - –Ω–µ –±—ã–ª–æ –≤—ã—è–≤–ª–µ–Ω–æ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏
# - –±—ã–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω Pipeline —Å –º–æ–¥–µ–ª—è–º–∏  KNeighborsClassifier, DecisionTreeClassifier, LogisticRegression
# 
# –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é —É—Ä–æ–≤–Ω—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:
# - —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ª—É—á—à–µ–π –æ–∫–∞–∑–∞–ª–∞—Å—å {'models': DecisionTreeRegressor(max_depth=14, max_features=13, random_state=42), 'models__max_depth': 14, 'models__max_features': 13, 'preprocessor__num': MinMaxScaler()}
# - –û—Ç–±–æ—Ä –º–æ–¥–µ–ª–µ–π –æ—Å—É—â–µ—Å—Ç–ª—è–ª—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫–∏ smape
# - –ú–µ—Ç—Ä–∏–∫–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ: 5.68
# - –ú–µ—Ç—Ä–∏–∫–∞ SMAPE –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: 14.32
# 
# 
# –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é —É–≤–æ–ª—å–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:
# - –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–∑–Ω–∞–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Ç.–∫. –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–¥–∏–∑ –ø–æ–∫–∞–∑–∞–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
# - —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ª—É—á—à–µ–π –æ–∫–∞–∑–∞–ª–∞—Å—å {'models': DecisionTreeClassifier(max_depth=6, max_features=5, random_state=42), 'models__max_depth': 6, 'models__max_features': 5, 'preprocessor__num': 'passthrough'}
# - –û—Ç–±–æ—Ä –º–æ–¥–µ–ª–µ–π –æ—Å—É—â–µ—Å—Ç–ª—è–ª—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫–∏ roc-auc
# - –ú–µ—Ç—Ä–∏–∫–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ: 0.93
# - –ü–ª–æ—â–∞–¥—å ROC-–∫—Ä–∏–≤–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: 0.92
# 
# –ê–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—ã—è–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
# –†–∞–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
# - level
# - job_satisfaction_rate
# - workload
# - employment_years
# - supervisor_evaluation
# - salary
# 
# 
# –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã.
# –°–∫–ª–æ–Ω–Ω—ã –∫ —Ç–µ–∫—É—á–∫–µ:
# - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Å—Ä–æ–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ - —á–µ–º –±–æ–ª—å—à–µ —Å—Ä–æ–∫ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏, —Ç–µ–º –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≤–æ–ª–∏—Ç—å—Å—è
# - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ - –≤ –æ–±—â–µ–º-—Ç–æ –ª–æ–≥–∏—á–Ω–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –∑–∞–¥–∞—á–∞–º–∏
# - –Ω–∏–∑–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ —Å–æ—Ä—Ç—å—Ä—É–¥–Ω–∏–∫–∏ –º–ª–∞–¥—à–∏—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –≠—Ç–∏ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç —É—Å—Ç–æ–π—á–∏–≤—É—é —Å–≤—è–∑—å (—á–µ–º –≤—ã—à–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å - —Ç–µ–º –≤—ã—à–µ –∑–∞—Ä–ø–ª–∞—Ç–∞, –ª–æ–≥–∏—á–Ω–æ) - —Å –±–æ–ª—å—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π —Å–ª–æ–∂–Ω–µ–µ –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–æ–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ—ç—Ç–æ–º—É —Ç–µ–∫—É—á–∫–∞ —Ç–∞–º –º–µ–Ω—å—à–µ
# - —á–µ–º –º–µ–Ω—å—à–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ä–∞–±–æ—Ç–æ–π, —Ç–µ–º –±–æ–ª—å—à–µ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞ –∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–∫—É—á–Ω–µ–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ, —á—Ç–æ —É–º–µ–Ω—å—à–∞–µ—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
# 
# –ü—Ä–æ—Ü–µ–Ω—Ç —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–µ–ø–∞—Ä–∞—Ç–∞–º–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# 
# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –Ω–µ —Å–∫–ª–æ–Ω–Ω—ã–µ –∫ —Ç–µ–∫—É—á–∫–µ:
# - –ø–æ–ª—É—á–∏–≤—à–∏–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
# - –Ω–µ –∏–º–µ—é—â–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π

# –ò–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —É–≤–æ–ª—å–Ω–µ–Ω–∏–π —è –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ:
# –î–≤—É–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –æ–∫–∞–∑—ã–≤–∞—é—â–∏–º–∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ —É–≤–æ–ª—å–Ω–µ–Ω–∏—é —è–≤–ª—è—é—Ç—Å—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ª–µ—Ç.
# 
# –ö–∞—Å–∞—Ç–µ–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–µ—Ç - —Ç–æ, –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏ —É –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –º–µ–Ω–µ–µ –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞. –í–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ –∞–¥–ª–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  - –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–µ—Ç. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ "–ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ" —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.
# –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥—è –∏–Ω—Å—Ç–∏—Ç—É—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –º—è–≥–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å—Ä–µ–¥—É –∫–æ–º–ø–∞–Ω–∏–∏.
# 
# –ö–∞—Å–∞—Ç–µ–ª—å–Ω–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —Ä–∞–±–æ—Ç—ã - —Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –≤ –±–æ–ª—å—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º–∏ —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –≤ –º–µ–Ω—å—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏  - —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã. –í–ª–∏—è–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –µ—â–µ –º–µ–Ω—å—à–µ.
# –ü–æ—ç—Ç–æ–º—É –∏–Ω—Å—Ç–∏—Ç—É—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–æ–≥–∏—á–µ–Ω –∏ –≤ —Ä–∞–º–∫–∞—Ö –æ—Ü–µ–Ω–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –±–æ–ª–µ–µ –ª–æ—è–ª—å–Ω—ã–º–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ "–º–æ–ª–æ–¥—ã—Ö" —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - —Å–æ —Å—Ç–∞–∂–µ–º –¥–æ –≥–æ–¥–∞), –∏ —Ç–∞–∫–∂–µ –≤ –±–æ–ª—å—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ü–µ–ª–æ–º —Å–≤–æ–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
# –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —Ç–µ–∫—É—á–∫—É - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞. –ö–∞–∫ –ø–æ–∫–∞–∑–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –æ–∫–ª–∞–¥–æ–º –±–æ–ª–µ–µ 40 —Ç—ã—Å. –º–µ–Ω–µ–µ —Å–∫–ª–æ–Ω–Ω—ã –∫ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è–º.
